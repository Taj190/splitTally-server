import express from 'express';
import dotenv from 'dotenv';
import ConnectDb from './src/dbConfig/db.js';
import cors from 'cors'
import cookieParser from 'cookie-parser';
import { authentication } from './src/route/googleSignUp.js';
import { groupCreation } from './src/route/GroupRoute/GroupRoute.js';
import { TransAction } from './src/route/TransactionRoute/Addtransaction.js';
dotenv.config();
const app = express();
const port = process.env.PORT || 5000;



app.use(express.json());
ConnectDb();
// for cookie
app.use(cookieParser());
// Move CORS configuration before any other middleware or routes
app.use(cors({
    origin: process.env.NODE_ENV === 'production' 
        ? 'https://split-tally.vercel.app'  // Use your Vercel frontend URL in production
        : 'http://localhost:3000',  // Use localhost in development
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'credentials'], 
    exposedHeaders: ['Set-Cookie'] 
}));



app.options('*', cors());
//for signup
app.use('/user', authentication);
// for login
app.use('/login', authentication)
// to logout 
app.use('/auth', authentication)
//to get code
app.use('/code',authentication)
//forgot password to verify email
app.use('/auth',authentication)
//reset password after email verification
app.use('/auth', authentication)
// to create Group
app.use('/group', groupCreation)
// to get name of groups
app.use('/group' , groupCreation)
//to get single group detail
app.use('/group', groupCreation )
// sending code to add group member
app.use('/code', groupCreation)
// to add new member in group
app.use ('/send' , groupCreation)
// to set privacy mode on or off
app.use('/privacymode' , groupCreation)
// if someone leave the group
app.use('/group', groupCreation)
// to know privacymode is true or false 
app.use('/mode', groupCreation)
// to add transaction 
app.use('/add', TransAction)
// to get detail of all transactions
app.use('/transactions', TransAction)
// to edit transaction
app.use('/edit', TransAction)
// to get single transaction 
app.use('/single', TransAction)
// to delete transaction
app.use('/delete', TransAction)
// to verify transaction
app.use('/verify', TransAction)
// transaction detail of transaction status why in pending phase 
app.use('/transaction', TransAction) 
// to get total of group expense and contribution of each person
app.use('/total' , TransAction)
// to settle account
app.use('/account' , TransAction)
// to analize
app.use('/spending' , TransAction)
// to get AI REPORT STATUS FOR BTN SELECTION
app.use('/report', TransAction)
// to get detail of report generated by AI
app.use('/report', TransAction)
// to reset account transactions
app.use('/account' , TransAction)
// to get the detail of person who have performed the recent reset of tranaction
app.use('/account', TransAction)


app.listen(port, () => {
    console.log(`Backend server running at ${port}`);
});